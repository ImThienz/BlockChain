import React, { useState } from "react";
import { loadWeb3, loadContract } from "../config/web3";  // C√°c h√†m ƒë·ªÉ k·∫øt n·ªëi Web3 v√† h·ª£p ƒë·ªìng

const TradeForm = ({ account }) => {
  const [isBuy, setIsBuy] = useState(true);  // M·∫∑c ƒë·ªãnh l√† "Mua"
  const [amount, setAmount] = useState("");  // S·ªë l∆∞·ª£ng CRT
  const [price, setPrice] = useState("");    // Gi√° m·ªói CRT (t√≠nh b·∫±ng ETH)
  const [loading, setLoading] = useState(false);  // Tr·∫°ng th√°i khi giao d·ªãch

  // H√†m ƒë·ªÉ x·ª≠ l√Ω vi·ªác ƒë·∫∑t l·ªánh
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const web3 = await loadWeb3();  // K·∫øt n·ªëi Web3
      const contract = await loadContract();  // L·∫•y h·ª£p ƒë·ªìng th√¥ng minh

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng v√† gi√° c√≥ h·ª£p l·ªá kh√¥ng
      if (amount <= 0 || price <= 0) {
        alert("‚ùå S·ªë l∆∞·ª£ng v√† gi√° ph·∫£i l·ªõn h∆°n 0");
        setLoading(false);
        return;
      }

      const value = web3.utils.toWei(price.toString(), "ether");

      // ƒê·∫∑t l·ªánh mua/b√°n v√†o h·ª£p ƒë·ªìng
      await contract.methods.placeOrder(isBuy, amount, value).send({
        from: account,  // G·ª≠i t·ª´ t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng
      });

      alert(`‚úÖ ƒê·∫∑t l·ªánh ${isBuy ? "Mua" : "B√°n"} CRT th√†nh c√¥ng!`);
      setAmount("");  // L√†m tr·ªëng tr∆∞·ªùng nh·∫≠p s·ªë l∆∞·ª£ng
      setPrice("");   // L√†m tr·ªëng tr∆∞·ªùng nh·∫≠p gi√°
    } catch (err) {
      console.error(err);
      alert("‚ùå L·ªói khi ƒë·∫∑t l·ªánh.");
    }
    setLoading(false);  // K·∫øt th√∫c tr·∫°ng th√°i loading
  };

  return (
    <div className="p-6 max-w-xl mx-auto bg-white shadow-md rounded-lg">
      <h1 className="text-2xl font-bold mb-4">üìà ƒê·∫∑t l·ªánh {isBuy ? "Mua" : "B√°n"} CRT</h1>

      <div className="space-y-4">
        {/* Radio Button ƒë·ªÉ ch·ªçn mua/b√°n */}
        <div className="flex items-center">
          <input
            type="radio"
            id="buy"
            name="tradeType"
            checked={isBuy}
            onChange={() => setIsBuy(true)}
            className="mr-2"
          />
          <label htmlFor="buy" className="mr-4">Mua</label>
          <input
            type="radio"
            id="sell"
            name="tradeType"
            checked={!isBuy}
            onChange={() => setIsBuy(false)}
            className="mr-2"
          />
          <label htmlFor="sell">B√°n</label>
        </div>

        {/* Nh·∫≠p s·ªë l∆∞·ª£ng CRT */}
        <div className="space-y-2">
          <label className="block font-medium">üí∏ Nh·∫≠p s·ªë l∆∞·ª£ng CRT:</label>
          <input
            type="number"
            className="border p-2 w-full rounded"
            placeholder="S·ªë l∆∞·ª£ng CRT"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            min="0"
            step="0.0001"
          />
        </div>

        {/* Nh·∫≠p gi√° m·ªói CRT */}
        <div className="space-y-2">
          <label className="block font-medium">üíµ Nh·∫≠p gi√° m·ªói CRT (ETH):</label>
          <input
            type="number"
            className="border p-2 w-full rounded"
            placeholder="Gi√° m·ªói CRT"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
            min="0"
            step="0.0001"
          />
        </div>

        {/* N√∫t Submit */}
        <button
          onClick={handleSubmit}
          className={`w-full py-3 rounded-full text-white ${loading ? "bg-gray-400" : "bg-blue-600 hover:bg-blue-700"}`}
          disabled={loading}
        >
          {loading ? "ƒêang x·ª≠ l√Ω..." : `${isBuy ? "Mua" : "B√°n"} CRT`}
        </button>
      </div>
    </div>
  );
};

export default TradeForm;
